Vic Ramon's Vim Tutorial
------------------------

This is a Vim tutorial that teaches the philosophy of Vim and all the motions and actions that you
should know for day-to-day use actually coding with Vim.

Learn more about Vim at http://vicramon.com/vim. You can also submit questions, comments and
feedback there.


==== Introduction ====

Vim is great for writing code, but what surpised me most about Vim is that it's FUN. It's really
exciting to see a whole paragraph disappear with 3 keys, or to play a macro that does a ton of work
with with a single keystroke.

Now that I know Vim I couldn't imagine writing code without it. I hope that you will feel the same
way once you become a Vim expert.

I created this tutorial for a few reasons. First I thought I could improve upon existing tutorials
by focusing on the commands and patterns that programmers use most. Second, I wanted to teach people
more about the philosophy of Vim and how that relates to pleasant and speedy coding. Most of all, I
wanted to provide a thorough guide to Vim that will be useful to both beginner and intermediate
Vimmmers alike.


==== How To Use this Tutorial ====

When you see a new command immediately practice it in this file. If it's a command that changes
something just hit u to undo. The only way you will remember all of these commands is to use them
repetetively, so for each command you learn, PLAY WITH IT. Experiment. See what it does and how it
behaves. It's easier to remember all of these commands than you might think if you can integrate
them into your muscle memmory.


==== Check out the Manual ====

Vim comes with an incredibly detailed built in manual. Just type :help <command> to get all the
inofrmation about a command. The manual will open in a horizontal split. Just type :q<enter> to
close the manual.


==== Basic Terminology ====

The line at the very bottom of Vim which shoud currently be empty is called the "command line". The
second to last line at the bottom of Vim, which should have the name this file is called the "status
line".


Let's begin!


==== Table of Contents ====

Chapter 1: Motions
Chapter 2: Insert Mode
Chapter 3: Delete
Chapter 4: Change
Chapter 5: Text Objects
Chapter 6: Replace & Substitute
Chapter 7: Search & Options
Chapter 8: Yank & Paste
Chapter 9: Selections
Chapter 10: File Management
Chapter 11: Custom Settings
Chapter 12: Color Schemes
Chapter 13: Additional Resources
Chapter 14: Plugins
Chapter 15: Tmux

----------------------------------------------------------------------------------------------------

CHAPTER 1: Motion

Learning all the motions is the first step in mastering Vim. Later, these motions can be combined
with actions to great effect.


==== Basic Motion =====

Let's start with basic motions. Try these out:

h moves you left
l moves you right

j moves you down (think "Jump Down")
k moves you up (think "Kick it Up")

You can hold these keys down to keep moving. You can get around a file with hjkl, but it's not very
efficient, so lets go over a few ways to get around faster.

==== Speedy Motion ====

{ moves you one paragraph up
} moves you one paragraph down

Now we're screaming! { and } are great for every day use to get around methods quickly.

==== Scrolling ====

control-u scrolls up (u for up)
control-d scrolls down (d for down)

These may come in handy if you want to jump around this tutorial.

==== Top / Bottom of File ====

gg takes you to the first line in the file
G takes you to the bottom of a file

==== Line Motion ====

^ moves you to the first character in a line
0 moves you to the beginning of the entire line (think "0 is the beginning")
$ moves you to the end of the line (think "the buck stops here")

==== Word Motion ====

w moves you to the first character of the next word (w for word)
e moves you to the last character of the next word (e for end)
b moves you to the first character of the previous word (b for beginning)

w, e, and b are good for crusing through words.

Note that you can capitalize any of these and they will skip across special characters. For example,
E will skip across these (parentheses), whereas e will stop at each special character.

==== Precise motion with f and t ====

The things I've shown you so far are great, but even if you get to a word with e, you still would
have to use h or l to get to a specific character if it's not at the beginning or end of the word.
That can add up to a lot of keystrokes.

Precise motion can minimize those keystrokes.

f<character> moves you to the next occurrence of <character> in your current line (think "f is
find")

Try it on the line above by going to the beginning of the line, then typing "fo". That should take
you to the "o" in "move".

Cycle through the search results:

; moves you to the next occurrence of the character you searched for.
, moves you to the previous occurrence of the character you searched for.

Next let's talk about t. t is like f, but it takes you up *till* the character you search for.

t<character> moves you to the spot immediately before the next occurrence of <character> is till")

Examples:

t.
t)
ta

f and t are some of the most useful motions. You'll see their true power once we combine them with
actions in future chapters.

==== Motions Wrap Up ====

The best way to get good at motions is to practice. Play with all the different motion types, and
soon enough they'll be like second-nature.

The main goal with Vim motions is to get to your desired location with the fewest keystrokes
possible. Knowing all of these motions cold will help you accomplish this.


----------------------------------------------------------------------------------------------------

CHAPTER 2: Insert Mode

Vim is a modal editor, meaning that it has different modes. The mode you're in when you're just
moving around is called "Normal Mode". To insert new text, we'll need act like a superhero and
change costumes into... INSERT MODE.

==== Undo / Redo ====

Before we start modifying text, you should know these two things:

u undo
control-r redo

Now you know how to undo any crazy changes you make to this file. Just hold u until you're back to
the original. Note that u and control-r only work in normal mode.


==== Basic Insert ====

i switches you into insert mode wherever the cursor is.
a will put you in insert mode one space after the cursor
<escape> puts you back in normal mode.

You will know that you are in insert mode if you see "-- INSERT --" at the bottom of Vim.

=== Advanced Insert  ====

The cool thing about insert mode is that there are many ways to get into it,
each of which will put you in insert mode AND move you to the right spot to insert
code.

I will put you in insert mode at the beginning of a line.
A will put you in insert mode at the end of a line.
o will put you in insert mode on a new line (think "open")
O (that's capital o, not zero) will put you in insert mode on a new line above your current line.

That's it for insert mode. If you find your pinky getting tired of hitting escape you can use
control-c or control-[ instead.

----------------------------------------------------------------------------------------------------

CHAPTER 3: Delete

Actions are the verbs of Vim -- they actually do things. They can be combined with motions to get
the exact result you want. Delete is the first action I'll be showing you.

==== Basic Actions =====

x deletes the character under the cursor

==== Delete ====

While x is good for simple deletions, what if you need to delete more things? Enter d.

d<motion> delete

Examples:

dw will delete to a word
db will delete to the beginning of the word
d$ will delete to the the end of the line
d0 will delete to the beginning of the line.

==== Delete with t/f ===

d is extremely powerful when combined when combined with t and f.

df<character> will delete everything from the cursor to (and including) the first occurence of
<character>.

dt<character> will delete everything from the cursor till the first occurence of <character>.

Examples:

dt. delete till next .
dt) delete till next )
dta delete till next a

dt. is a very useulf command when coding.

==== Prepending a Count ====

dd will delete the current line

You can append a count to the front of this command to repeat it on multiple lines.

<count>dd will delete <count> lines

You will most often use dd by itself, or 2dd and 3dd to delete a paragraph or method.

==== Delete to end of line ====

D will delete from your cursor location to the end of the line


----------------------------------------------------------------------------------------------------


CHAPTER 4: Change

==== Basic Usage ====

Change is like delete, but it puts you in insert mode immediately after doing the delete. This is
helpful when you want to delete text, then immediatley replace it with something else.

c<motion> will change the text specified by that motion.

Examples:

cw will change a word.
c$ will change to the end of a line
c0 will change to the begining of a line

Note: like D with delete, C will also change to the end of a line

==== Using change with t and f ====

Combining c with t and f is one of the most useful commands in Vim.

ct<character> change up till that character
cf<character> change up to (and including) that character

Examples:

ct. change till next .
ct) change till next )
cta change till next a


----------------------------------------------------------------------------------------------------

CHAPTER 5: Text Objects


==== Basic Usage ====

Text objects are Vim's representation of groups of text.

These are some of the text objects you'll use the most:

a word
s sentence
p paragraph

You specify how you want an action to be applied with all or in:

a all, the action will be applied to the text object AND the delimiters
i in, the action will be applied inside the delimiters

This is how you actually use text objects:

<action><specifier><text object>

Examples:

dap Delete all parauraph.
ciw Change in word.

You will use these two commands frequqently. dap is a great way to quickly delete a method.

Note that if you do caw instead of ciw the succeeding space will be deleted, which you probably
don't want it you're trying to change a word.


==== String-based Text objects ====

A word is small and a paragraph is large, is there anything in between?  As a matter of fact there
is. You can specify delimeters as text objects.

Additional text objects:

"
'
) or (
] or [
} or {

Examples:

ci" Change inside closest double quote "try it"
ci' Change inside closest single quote 'try it'
ci) Change inside closest parentheses (try it)
ci] Change inside closest brackets [try it]
ci} Change inside closest braces {try it}

Note that if you do ca) instead of ci) then the parentheses will be deleted.


----------------------------------------------------------------------------------------------------

Chapter 6: Replace & Substitute

Replace and substitute are two additional actions.

==== Replace ====

Type r<character> to replace the character under the cursor with <character>.

Type R to enter replace mode. In replace mode anything you type will overwrite what's currently there.

You can hit <escape> to exit replace mode.


==== Basic Substitute ====

s will delete the character under cursor then place you in insert mode so you can continue typing

S will delete the text on the current line and place you in insert mode at the beginning of the
line.

I use S whenver I need to change an entire line and I'm not at the beginning of that line. The neat
thing about S is that it respects tab alignment. It's essentially ^C combined into one command.

==== Primer on Ex Commands ====

Ex commands are when you type : then type a command. If you hit : then start typing you will see
your text appear on the command line. You can hit <enter> to execute a command or <escape> to get
out.

==== Substitute Ex Command ====

:%s/old/new/g will replace "old" with "new" everywhere in your current file.

The g stands for global.

Add c to the end to be prompted before making each change. This is great for search and replace
where you need to check each match and choose whether or not to make the replacement.

:%s/old/new/gc

#todo: visual selection substitute


----------------------------------------------------------------------------------------------------


Chapter 7: Search & Options


==== Basic Search ====

Search is an invaluable tool that happens to be very easy in Vim.

Hit / and you will see / appear in the tray at the bottom of Vim. Start typing what you want to
search for, then hit enter to go to the first match.

Usage:

/<string> search for next occurrences of <string>
?<string> search for previous occurrences of <string>

enter takes you to the first match

Cycle through matches:

n go to next match
N go to previous match


==== A Primer on Options =====

You can turn an option on like this:

:set <option>

Some options are boolean. To turn them off, type:

:set no<option>

Other options take a parameter:

:set <option>=<parameter>

You can inquire about the current state of an option:

:set <option>?


==== Search Options ====

There are two options that I recomend you turn on for searching.

First, set search to ignore the case of characters.

:set ic

Second, turn on "smartcase". If you type in a search pattern that is all lowercase then smartcase
will show both lower and uppercase matches. However, if you type a single uppercase character then
smartcase will become case sensitive.

:set smartcase

Smartcase gives you the best of both worlds. You don't have to type uppercase characters when
casually searching, but if you need to find a specific constant or class name, which typically has
an uppercase character, you can weed out all the lowercase matches by typing with the actual case.

Unfortunately, both of these settings default to off. You can put them in your vimrc file so that
you don't have to type them every time you start Vim. We'll cover vimrc's in a later chapter.


==== Search with * ====

* will search for the word under the cursor. You can use n and N to cycle through the results.


----------------------------------------------------------------------------------------------------


Chapter 8: Yank & Put

Vim's yank and put are like copy and paste.


==== Basic Yank ====

y<motion> will yank that specified text.
yy will yank the entire line

Examples:

yw   yank word
y$   yank to end of line
2yy  yank the next 2 lines

yt.  yank till .
yfg  yank to next occurrence of g

==== Basic Put ====

p  put the last yank after the cursor
P  put the last yank before the cursor

==== Pasting with Registers ====

Vim keeps track of all the things you have recently deleted in the register. Delete a few things, they type :reg to see the register. You will see output like the following:

--- Registers ---
""   the most recent deleted OR yanked text
"0   the most recent yanked text
"1   the second most recent deleted text
"2   the third most recent deleted text
"3   etc...
"4   etc...
"5   etc...
"6   etc...
"7   etc...
"8   etc...
"9   etc...

The first register, the " register, is called the unnamed register. It contains your most recent
delete or yank. If you yank something, then delete something else then this register will be
overwritten by the delete.

This can create problems because you could yank something, intending to paste it elsewhere, then
delete some text along the way, then type p expecting to see your paste, and -- whoops -- instead,
you see what you deleted.

The solution to this is the 0 register. The 0 register will contain your last yank and it won't be
overwritten by any deletions.

To put from the 0 register, type "0p . Now that's a lot of characters and the 0 key is way in the
upper right of the keyboard. We can do better than that for something we want to use a lot, so lets
make a custom mapping for it.

:noremap gp "0p

This will make gp always put from the 0 register. I'll be covering mappings in a later chapter, just
know that if you feel like something sucks in Vim you can usually make a mapping that fixes it.


----------------------------------------------------------------------------------------------------

Chapter 9: Selections

There are three types of selections you can make in Vim: visual, visual line, and visual block.
Selections are a core feature that you will come to love.

==== Visual Selection ====

Press v to activate visual selection mode, then use motions to expand the selected area.

Once you are a visual selection you can perform operations on the selected text.

d  delete the selected text
x  same thing
c  change the selected text
y  yank the selected text

You will typically use visual selection to select a specific piece of code and yank it. You could
yank the code with the standard yank command, but doing a visual selection allows you to see exactly
what you are about to yank.

You can press o while in a visual selection to move the cursor to the other side of the selection
box. This allows you to expand the selection in the other direction.

==== Visual Line ====

Press shift-v to active visual line selection. Use motions like j, k, }, and { to expand the area of
the selection.

You can then use the same commands as a visual selection to modify the text.

Visual line is great when you need to to move, delete or yank large portions of text.

Remember that if you need to delete or yank a paragraph (paragraph means all the lines are
touching) then dap and yap are faster than doing a visual line selection.

==== Visual Block ====

Press control-v to activate visual block selection. Visual block is unique because you can select
characters across columns.

Use visual-block mode to fixup similar looking text on multipe lines. Consider this text:

htis is a typo
htis is a typo
htis is a typo
htis is a typo

You could use visual block to highlight the "ht" in the first line, then hit 3j, type c, then th,
then <escape>. This would fix the typo on all of the lines.

The standard selection commands work with visual block:

x or d to delete
c to change
y to yank

I to insert text. This is unique to visual block. Note that you will only see your text on the first
line until you hit <escape>.


----------------------------------------------------------------------------------------------------


Chapter 10: File Management

==== Saving ====

If you've made changes to a file you will see a [+] symbol next to the name of the file in the
status line.

To save your changes to a file type :w and hit enter (w for write).


==== Quitting ====

To quit out of a file, type :q . If you've made changes without saving then Vim will give you the
error: "No write since last change."

If you want to ignore your changes and not write the file type :q! to get out of the file.

If you want to save your changes and quit, type :w, then :q . Naturally, this can be abbreviated
into :wq or :x. They both do the same thing. I prefer :x because it's one less character than :wq.


==== Opening a File & Splits ====

:edit <filename>, or :e for short, will open the file in your current window

:split <filename>, or :sp, will open the file in a horizontal split.

:vsplit <filename>, or :vs, will open the file in a vertical split.

You can open as many splits as you want.

To switch from one split to another type control-w <direction>. Direction can be h, j, k, or l.

To move the arrangement of a split, type control-w <DIRECTION>, where direction is H, J, K, or L.


==== Tabs ====

:tabedit <filename>, or :tabe will open a file in a new tab.

Tabs are visible across the top of the screen.

gt will take you to the next tab
gT will take you to the previous tab


==== Opening a Directory ====

:e <path/to/directory> will open a directory
:e .  will open the current directory

While in the directory view use j and k to move up and down file names, and enter to open the file
or directory under the cursor.


==== Renaming a File ====

Vim has trouble doing this by itself. It has a :saveas command, but this won't remove the previously
named file.

Tim Pope wrote plugin called Eunuch which will handle renaming with the :Rename command. I will
cover plugins in a later chapter.

See Eunuch: https://github.com/tpope/vim-eunuch


----------------------------------------------------------------------------------------------------

Chapter 11: Custom Settings


==== Custom Mappings ====

Vim allows you to map any key to any other key. For example:

:map x :echo 'hi'<cr>

If you type that then hit x you will see 'hi' printed on the command line. We don't want to keep
this mapping, so let's get rid of it.

:unmap x

When mapping commands you should almost always prefix the mapping with 'nore', which stands for
non-recursive. This means that the mapping will look to the true vim commands for the sequence it's
using instead of looking at another vim mapping. This prevents any unwanted recursion or une in mapping
commands. A typical mapping should look like this:

:noremap <keystroke to map> <keystroke to use>

If you try ":noremap x p", you'll see that x will will do a put. However, if you enter insert mode
then type x you will see x, not p. That's because mapping defaults to normal mode only. If you want
to make a mapping specifically for insert mode, you would have to do:

:inoremap <keystroke to map> <keystroke to use>

The same goes for visual mode:

:vnoremap <keystroke to map> <keystroke to use>

In summary we have:

:noremap
:inoremap
:vnoremap

And corresponding unmap commands:

:unmap
:iunmap
:vunmap

==== Vimrc ====


==== Abbreviations ====

:abbrev <abbreviation text> <full text>


----------------------------------------------------------------------------------------------------


Chapter 12: Color Schemes


  - solarized
  - molokai
  -


----------------------------------------------------------------------------------------------------


Chapter 13: Additional Resources
  - Practical Vim
  - VimGenius
  -


----------------------------------------------------------------------------------------------------


Chapter 14: Plugins
  - Plugin Manager: pathogen
  - Eunuch
  - SuperTab
  - RailsVim?

----------------------------------------------------------------------------------------------------


Chapter 15: Tmux
  - this is it's own tutorial
